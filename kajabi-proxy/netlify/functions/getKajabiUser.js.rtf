{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // This is our secure server-side function.\
exports.handler = async function(event, context) \{\
  // Get the secret key from Netlify's environment variables.\
  // It is NOT stored in the code.\
  const KAJABI_SECRET_KEY = process.env.KAJABI_SECRET_KEY;\
  \
  // Get the current user's unique identifier from the request headers.\
  // NOTE: This part is crucial and depends on what Kajabi sends.\
  // For now, we assume the browser sends its auth cookie automatically.\
  // We will add the Kajabi user's auth token if needed.\
  const userAuthCookie = event.headers.cookie;\
\
  try \{\
    const response = await fetch('https://api.kajabi.com/v1/me', \{\
      method: 'GET',\
      headers: \{\
        // The function sends the user's cookie AND your secret key.\
        // This is a common pattern, but we may need to adjust headers\
        // based on Kajabi's specific requirements.\
        'Authorization': `Bearer $\{KAJABI_SECRET_KEY\}`,\
        'Cookie': userAuthCookie || ''\
      \}\
    \});\
\
    if (!response.ok) \{\
      // If Kajabi returns an error, pass it along.\
      return \{\
        statusCode: response.status,\
        body: JSON.stringify(\{ error: `Kajabi API Error: $\{response.statusText\}` \})\
      \};\
    \}\
\
    const userData = await response.json();\
    \
    // Return ONLY the necessary data (the name) back to the Kajabi page.\
    return \{\
      statusCode: 200,\
      headers: \{\
        // This header is crucial to allow your Kajabi site to access this function.\
        'Access-Control-Allow-Origin': '*' // For testing. Can be locked down later.\
      \},\
      body: JSON.stringify(\{ name: userData.data.attributes.name \})\
    \};\
\
  \} catch (error) \{\
    return \{\
      statusCode: 500,\
      body: JSON.stringify(\{ error: 'Function execution error.' \})\
    \};\
  \}\
\};}